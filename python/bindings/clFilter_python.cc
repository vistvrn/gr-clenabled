/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(clFilter.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(fa92a35c79ab31d19fafeb69dd3970dc)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <clenabled/clFilter.h>
// pydoc.h is automatically generated in the build directory
#include <clFilter_pydoc.h>

void bind_clFilter(py::module& m)
{

    using clFilter    = ::gr::clenabled::clFilter;


    py::class_<clFilter, gr::sync_decimator,
        std::shared_ptr<clFilter>>(m, "clFilter", D(clFilter))

        .def(py::init(&clFilter::make),
           py::arg("openclPlatform"),
           py::arg("devSelector"),
           py::arg("platformId"),
           py::arg("devId"),
           py::arg("decimation"),
           py::arg("taps"),
           py::arg("nthreads") = 1,
           py::arg("setDebug") = 0,
           py::arg("use_time") = gr::clenabled::DEFAULT_USE_TIME_DOMAIN_SETTING,
           D(clFilter,make)
        )
        




        
        .def("set_taps2",&clFilter::set_taps2,       
            py::arg("taps"),
            D(clFilter,set_taps2)
        )


        
        .def("taps",&clFilter::taps,       
            D(clFilter,taps)
        )


        
        .def("set_nthreads",&clFilter::set_nthreads,       
            py::arg("n"),
            D(clFilter,set_nthreads)
        )

        ;




}








